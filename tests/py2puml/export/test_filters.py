import pytest

from py2puml.domain.umlitem import UmlItem
from py2puml.domain.umlrelation import UmlRelation
from py2puml.export.puml import Filters
from py2puml.py2puml import py2puml

un_modified_puml = [
    '@startuml tests.modules.withinheritedconstructor\n!pragma useIntermediatePackages false\n\n',
    'class tests.modules.withinheritedconstructor.metricorigin.MetricOrigin {\n',
    '  unit: str {static}\n',
    '}\n',
    'class tests.modules.withinheritedconstructor.point.Origin {\n',
    '  is_origin: bool {static}\n',
    '}\n',
    'class tests.modules.withinheritedconstructor.point.Point {\n',
    '  x: float\n',
    '  y: float\n',
    '}\n',
    'tests.modules.withinheritedconstructor.point.Origin <|-- tests.modules.withinheritedconstructor.metricorigin.MetricOrigin\n',
    'tests.modules.withinheritedconstructor.point.Point <|-- tests.modules.withinheritedconstructor.point.Origin\n',
    'footer Generated by //py2puml//\n',
    '@enduml\n',
]

puml_with_origin_class_skipped = [
    '@startuml tests.modules.withinheritedconstructor\n!pragma useIntermediatePackages false\n\n',
    'class tests.modules.withinheritedconstructor.metricorigin.MetricOrigin {\n',
    '  unit: str {static}\n',
    '}\n',
    'class tests.modules.withinheritedconstructor.point.Point {\n',
    '  x: float\n',
    '  y: float\n',
    '}\n',
    'tests.modules.withinheritedconstructor.point.Origin <|-- tests.modules.withinheritedconstructor.metricorigin.MetricOrigin\n',
    'tests.modules.withinheritedconstructor.point.Point <|-- tests.modules.withinheritedconstructor.point.Origin\n',
    'footer Generated by //py2puml//\n',
    '@enduml\n',
]

puml_with_point_origin_relation_skipped = [
    '@startuml tests.modules.withinheritedconstructor\n!pragma useIntermediatePackages false\n\n',
    'class tests.modules.withinheritedconstructor.metricorigin.MetricOrigin {\n',
    '  unit: str {static}\n',
    '}\n',
    'class tests.modules.withinheritedconstructor.point.Origin {\n',
    '  is_origin: bool {static}\n',
    '}\n',
    'class tests.modules.withinheritedconstructor.point.Point {\n',
    '  x: float\n',
    '  y: float\n',
    '}\n',
    'tests.modules.withinheritedconstructor.point.Origin <|-- tests.modules.withinheritedconstructor.metricorigin.MetricOrigin\n',
    'footer Generated by //py2puml//\n',
    '@enduml\n',
]

puml_with_point_class_and_point_origin_relation_skipped = [
    '@startuml tests.modules.withinheritedconstructor\n!pragma useIntermediatePackages false\n\n',
    'class tests.modules.withinheritedconstructor.metricorigin.MetricOrigin {\n',
    '  unit: str {static}\n',
    '}\n',
    'class tests.modules.withinheritedconstructor.point.Point {\n',
    '  x: float\n',
    '  y: float\n',
    '}\n',
    'tests.modules.withinheritedconstructor.point.Origin <|-- tests.modules.withinheritedconstructor.metricorigin.MetricOrigin\n',
    'footer Generated by //py2puml//\n',
    '@enduml\n',
]


def skip_origin_block(item: UmlItem) -> bool:
    return item.fqn.endswith('.Origin')


def skip_point_origin_relation(relation: UmlRelation) -> bool:
    return relation.source_fqn.endswith('.Point') and relation.target_fqn.endswith('.Origin')


def get_puml_content(filters: Filters) -> list[str]:
    return list(py2puml('tests/modules/withinheritedconstructor', 'tests.modules.withinheritedconstructor', filters))


def invalid_filter_without_filter_argument():
    return True


def invalid_filter_with_wrong_return_type(item: UmlItem) -> str:
    return 'True'


def invalid_filter_with_exception(item: UmlItem) -> bool:
    raise Exception('An error occurred')


non_callable_filter = 'not a function'


def test_without_giving_filters():
    generated_puml = list(py2puml('tests/modules/withinheritedconstructor', 'tests.modules.withinheritedconstructor'))
    assert generated_puml == un_modified_puml


def test_default_filters():
    filters = Filters()
    generated_puml = get_puml_content(filters)
    assert generated_puml == un_modified_puml


def test_skip_origin_class():
    filters = Filters(skip_block=skip_origin_block)
    generated_puml = get_puml_content(filters)
    assert generated_puml == puml_with_origin_class_skipped


def test_skip_point_origin_relation():
    filters = Filters(skip_relation=skip_point_origin_relation)
    generated_puml = get_puml_content(filters)
    assert generated_puml == puml_with_point_origin_relation_skipped


def test_skip_point_class_and_point_origin_relation():
    filters = Filters(skip_block=skip_origin_block, skip_relation=skip_point_origin_relation)
    generated_puml = get_puml_content(filters)
    print(''.join(generated_puml))
    print(len(generated_puml), len(puml_with_point_class_and_point_origin_relation_skipped))
    assert generated_puml == puml_with_point_class_and_point_origin_relation_skipped


@pytest.mark.parametrize(
    'invalid_filter',
    [
        invalid_filter_without_filter_argument,
        invalid_filter_with_wrong_return_type,
        invalid_filter_with_exception,
        non_callable_filter,
    ],
)
def test_invalid_filters(invalid_filter):
    with pytest.raises(ValueError):
        filters = Filters(skip_block=invalid_filter)
        get_puml_content(filters)

    with pytest.raises(ValueError):
        filters = Filters(skip_relation=invalid_filter)
        get_puml_content(filters)
